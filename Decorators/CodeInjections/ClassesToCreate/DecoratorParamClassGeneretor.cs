// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Decorators.CodeInjections.ClassesToCreate
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class DecoratorParamClassGeneretor : DecoratorParamClassGeneretorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\n" +
                    "namespace DecoratorsClassesGenerated\r\n{\r\n\r\n\tpublic class ParamsGenerics");
            
            #line 14 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            
            #line 14 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

	
	
		if(CantParams>0)
		{
			Write("<T" + 1);
			for(int i = 2; i<= CantParams; i++)
			{
				Write(", T" + i);
			}
			Write(">");
		}
	
            
            #line default
            #line hidden
            this.Write(" : IEnumerable<object>\r\n\t{\r\n\t");
            
            #line 28 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

		WriteLine("");
		PushIndent("		");
		for(int i = 1; i<= CantParams; i++)
		{
			WriteLine($"T{i} item{i};");
		} 
		PopIndent();
	
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\tpublic ParamsGenerics");
            
            #line 38 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 38 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

			
			if(CantParams>0)
			{
				Write("T1 item1");
				for(int i = 2; i<= CantParams; i++)
				{
					Write("," + $"T{i} item{i}");
				}
			}
		
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{");
            
            #line 49 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
		
				PushIndent("			");
				WriteLine("");
				for(int i = 1; i<= CantParams; i++)
				{
					WriteLine($"this.item{i} = item{i};");
				} 
				PopIndent();
		
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t\r\n\t\t");
            
            #line 60 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
	
			PushIndent("		");
			WriteLine("");
			for(int i = 1; i<= CantParams; i++)
			{
				WriteLine($"public T{i} Item{i}" + " { get => item" + i + "; set => item" + i + " = value; }");
			} 
			PopIndent();
		
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\r\n\t\tpublic IEnumerator<object> GetEnumerator()\r\n\t    {\r\n\t        return new P" +
                    "arams");
            
            #line 73 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            this.Write("Enumerator");
            
            #line 73 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

	
			if(CantParams>0)
			{
				Write("<T" + 1);
				for(int i = 2; i<= CantParams; i++)
				{
					Write(", T" + i);
				}
				Write(">");
			}
			
            
            #line default
            #line hidden
            this.Write("(this);\r\n\t    }\r\n\t\r\n\t\tIEnumerator IEnumerable.GetEnumerator()\r\n\t    {\r\n\t        r" +
                    "eturn GetEnumerator();\r\n\t    }\r\n\t\r\n\t\r\n\t\tpublic object this[int index]\r\n\t    {\r\n\t" +
                    "        get\r\n\t        {\r\n\t            switch (index)\r\n\t            {\r\n\t\t\t\t\t");
            
            #line 99 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

						PushIndent("					");
						WriteLine("");
						for(int i = 0; i< CantParams; i++)
						{
							WriteLine($"case {i}:");
							WriteLine($"	return Item{i+1};");
						}
						PopIndent();
					
            
            #line default
            #line hidden
            this.Write("\t                default:\r\n\t                    throw new IndexOutOfRangeExceptio" +
                    "n();\r\n\t            }\r\n\t        }\r\n\t        set\r\n\t        {\r\n\t            switch " +
                    "(index)\r\n\t            {\r\n\t                ");
            
            #line 117 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

						PushIndent("					");
						WriteLine("");
						for(int i = 0; i< CantParams; i++)
						{
							WriteLine($"case {i}:");
							WriteLine($"	Item{i+1} = (T{i+1})value;");
							WriteLine($"	break;");
						}
						PopIndent();
					
            
            #line default
            #line hidden
            this.Write("\t                default:\r\n\t                    throw new IndexOutOfRangeExceptio" +
                    "n();\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t\tpublic ");
            
            #line 134 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

		
		if(CantParams==1)
			Write("T1");
		else if(CantParams>1)
			{
				Write("(T" + 1);
				for(int i = 2; i<= CantParams; i++)
				{
					Write(", T" + i);
				}
				Write(")");
			}
		else Write("object");
			
		
            
            #line default
            #line hidden
            this.Write(" ToTuple()\r\n\t\t{\r\n\t\t\treturn ");
            
            #line 151 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

				if(CantParams==1)
					WriteLine("Item1;");
				
				else if(CantParams>1)
				{
					Write("(Item" + 1);
					for(int i = 2; i<= CantParams; i++)
					{
						Write(", Item" + i);
					}
					WriteLine(");");
				}
				else WriteLine("null");
			
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t\r\n\t\tpublic override int GetHashCode()\r\n\t    {\r\n\t        return this.ToTuple" +
                    "().GetHashCode();\r\n\t    }\r\n\t    public override string ToString()\r\n\t    {\r\n\t    " +
                    "    return this.ToTuple().ToString();\r\n\t    }\r\n\r\n\t\tpublic int Length { get { ret" +
                    "urn ");
            
            #line 177 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            this.Write("; } }\r\n\t\r\n\t\t\r\n\t\r\n\t}\r\n\r\n\tclass Params");
            
            #line 183 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            this.Write("Enumerator");
            
            #line 183 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

	
		if(CantParams>0)
		{
			Write("<T" + 1);
			for(int i = 2; i<= CantParams; i++)
			{
				Write(", T" + i);
			}
			Write(">");
		}
	
            
            #line default
            #line hidden
            this.Write(": IEnumerator<object>\r\n\t{\r\n\t\tobject current;\r\n\t    bool hasMoveNext;\r\n\t    int po" +
                    "s;\r\n\t\tParamsGenerics");
            
            #line 199 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            
            #line 199 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

	
		if(CantParams>0)
		{
			Write("<T" + 1);
			for(int i = 2; i<= CantParams; i++)
			{
				Write(", T" + i);
			}
			Write(">");
		}
	
            
            #line default
            #line hidden
            this.Write(" e;\r\n\r\n\t\tpublic Params");
            
            #line 212 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            this.Write("Enumerator(ParamsGenerics");
            
            #line 212 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CantParams));
            
            #line default
            #line hidden
            
            #line 212 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

		
			if(CantParams>0)
			{
				Write("<T" + 1);
				for(int i = 2; i<= CantParams; i++)
				{
					Write(", T" + i);
				}
				Write(">");
			}
		
            
            #line default
            #line hidden
            this.Write(@" e)
		{
			this.e = e;
		    pos = 0;
		    hasMoveNext = false;
		}

		public object Current
        { 
			get
            {
                if (hasMoveNext)
                    return current;
                throw new Exception();
            }
        }

        public void Dispose() {}

		public void Reset() {}

		public bool MoveNext()
        {
			switch (pos)
            {
				");
            
            #line 248 "C:\Datos\Trabajando en la tesis\II Semestre\Tesis\Tesis Projects\19-3-4 Funciones Decoradoras\Decorators\Decorators\CodeInjections\ClassesToCreate\DecoratorParamClassGeneretor.tt"

					PushIndent("				");
					WriteLine("");
					for(int i = 0; i< CantParams; i++)
					{
						WriteLine($"case {i}:");
						WriteLine($"	current = e.Item{i+1};");
						WriteLine($"	break;");
					}
					PopIndent();
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tdefault:\r\n                    return hasMoveNext = false;\r\n\t\t\t}\r\n\t\t\tpos++;\r\n " +
                    "           return hasMoveNext = true;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class DecoratorParamClassGeneretorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
